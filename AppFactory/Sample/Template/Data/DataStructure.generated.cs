#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;

namespace Template.Data
{
    public partial class Activities : DataContext
    {
        private static readonly MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void InsertEnclosure(Enclosure instance);
        partial void UpdateEnclosure(Enclosure instance);
        partial void DeleteEnclosure(Enclosure instance);
        partial void InsertSocialActivity(SocialActivity instance);
        partial void UpdateSocialActivity(SocialActivity instance);
        partial void DeleteSocialActivity(SocialActivity instance);

        #endregion

        public Activities(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public Table<Enclosure> Enclosures
        {
            get { return GetTable<Enclosure>(); }
        }

        public Table<SocialActivity> SocialActivities
        {
            get { return GetTable<SocialActivity>(); }
        }
    }

    [Table]
    public partial class Enclosure : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs =
            new PropertyChangingEventArgs(String.Empty);

        private string _Caption;
        private short _EnclosureType;

        private string _IconUrl;
        private Guid _Id;

        private string _ImageUrl;

        private EntityRef<SocialActivity> _SocialActivity;
        private string _SocialActivityId;
        private string _Url;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        partial void OnSocialActivityIdChanging(string value);
        partial void OnSocialActivityIdChanged();
        partial void OnCaptionChanging(string value);
        partial void OnCaptionChanged();
        partial void OnIconUrlChanging(string value);
        partial void OnIconUrlChanged();
        partial void OnImageUrlChanging(string value);
        partial void OnImageUrlChanged();
        partial void OnEnclosureTypeChanging(short value);
        partial void OnEnclosureTypeChanged();

        #endregion

        public Enclosure()
        {
            _SocialActivity = default(EntityRef<SocialActivity>);
            OnCreated();
        }

        [Column(Storage = "_Id", DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true)]
        public Guid Id
        {
            get { return _Id; }
            set
            {
                if ((_Id != value))
                {
                    OnIdChanging(value);
                    SendPropertyChanging();
                    _Id = value;
                    SendPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }

        [Column(Storage = "_Url", DbType = "NVarChar(255)")]
        public string Url
        {
            get { return _Url; }
            set
            {
                if ((_Url != value))
                {
                    OnUrlChanging(value);
                    SendPropertyChanging();
                    _Url = value;
                    SendPropertyChanged("Url");
                    OnUrlChanged();
                }
            }
        }

        [Column(Storage = "_SocialActivityId", DbType = "NVarChar(500) NOT NULL", CanBeNull = false)]
        public string SocialActivityId
        {
            get { return _SocialActivityId; }
            set
            {
                if ((_SocialActivityId != value))
                {
                    if (_SocialActivity.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }
                    OnSocialActivityIdChanging(value);
                    SendPropertyChanging();
                    _SocialActivityId = value;
                    SendPropertyChanged("SocialActivityId");
                    OnSocialActivityIdChanged();
                }
            }
        }

        [Column(Storage = "_Caption", DbType = "NText", UpdateCheck = UpdateCheck.Never)]
        public string Caption
        {
            get { return _Caption; }
            set
            {
                if ((_Caption != value))
                {
                    OnCaptionChanging(value);
                    SendPropertyChanging();
                    _Caption = value;
                    SendPropertyChanged("Caption");
                    OnCaptionChanged();
                }
            }
        }

        [Column(Storage = "_IconUrl", DbType = "NVarChar(255)")]
        public string IconUrl
        {
            get { return _IconUrl; }
            set
            {
                if ((_IconUrl != value))
                {
                    OnIconUrlChanging(value);
                    SendPropertyChanging();
                    _IconUrl = value;
                    SendPropertyChanged("IconUrl");
                    OnIconUrlChanged();
                }
            }
        }

        [Column(Storage = "_ImageUrl", DbType = "NVarChar(255)")]
        public string ImageUrl
        {
            get { return _ImageUrl; }
            set
            {
                if ((_ImageUrl != value))
                {
                    OnImageUrlChanging(value);
                    SendPropertyChanging();
                    _ImageUrl = value;
                    SendPropertyChanged("ImageUrl");
                    OnImageUrlChanged();
                }
            }
        }

        [Column(Storage = "_EnclosureType", DbType = "SmallInt NOT NULL")]
        public short EnclosureType
        {
            get { return _EnclosureType; }
            set
            {
                if ((_EnclosureType != value))
                {
                    OnEnclosureTypeChanging(value);
                    SendPropertyChanging();
                    _EnclosureType = value;
                    SendPropertyChanged("EnclosureType");
                    OnEnclosureTypeChanged();
                }
            }
        }

        [Association(Name = "SocialActivity_Enclosure_Id", Storage = "_SocialActivity", ThisKey = "SocialActivityId",
            OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
        public SocialActivity SocialActivity
        {
            get { return _SocialActivity.Entity; }
            set
            {
                SocialActivity previousValue = _SocialActivity.Entity;
                if (((previousValue != value)
                     || (_SocialActivity.HasLoadedOrAssignedValue == false)))
                {
                    SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        _SocialActivity.Entity = null;
                        previousValue.Enclosures.Remove(this);
                    }
                    _SocialActivity.Entity = value;
                    if ((value != null))
                    {
                        value.Enclosures.Add(this);
                        _SocialActivityId = value.Id;
                    }
                    else
                    {
                        _SocialActivityId = default(string);
                    }
                    SendPropertyChanged("SocialActivity");
                }
            }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        #region INotifyPropertyChanging Members

        public event PropertyChangingEventHandler PropertyChanging;

        #endregion

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Table]
    public partial class SocialActivity : INotifyPropertyChanging, INotifyPropertyChanged
    {
        private static readonly PropertyChangingEventArgs emptyChangingEventArgs =
            new PropertyChangingEventArgs(String.Empty);

        private readonly EntitySet<Enclosure> _Enclosures;

        private string _Author;
        private string _Description;

        private string _FeedSourceName;
        private string _Id;
        private int _Likes;

        private bool _Read;

        private string _ShortenedUrl;
        private DateTime _TimeStamp;
        private string _Title;

        private string _Url;

        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(string value);
        partial void OnIdChanged();
        partial void OnTimeStampChanging(DateTime value);
        partial void OnTimeStampChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnAuthorChanging(string value);
        partial void OnAuthorChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();
        partial void OnFeedSourceNameChanging(string value);
        partial void OnFeedSourceNameChanged();
        partial void OnReadChanging(bool value);
        partial void OnReadChanged();
        partial void OnShortenedUrlChanging(string value);
        partial void OnShortenedUrlChanged();
        partial void OnLikesChanging(int value);
        partial void OnLikesChanged();

        #endregion

        public SocialActivity()
        {
            _Enclosures = new EntitySet<Enclosure>(attach_Enclosures,
                                                   detach_Enclosures);
            OnCreated();
        }

        [Column(Storage = "_Id", DbType = "NVarChar(500) NOT NULL",
            CanBeNull = false, IsPrimaryKey = true)]
        public string Id
        {
            get { return _Id; }
            set
            {
                if ((_Id != value))
                {
                    OnIdChanging(value);
                    SendPropertyChanging();
                    _Id = value;
                    SendPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }

        [Column(Storage = "_TimeStamp", DbType = "DateTime NOT NULL")]
        public DateTime TimeStamp
        {
            get { return _TimeStamp; }
            set
            {
                if ((_TimeStamp != value))
                {
                    OnTimeStampChanging(value);
                    SendPropertyChanging();
                    _TimeStamp = value;
                    SendPropertyChanged("TimeStamp");
                    OnTimeStampChanged();
                }
            }
        }

        [Column(Storage = "_Description", DbType = "NText",
            UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get { return _Description; }
            set
            {
                if ((_Description != value))
                {
                    OnDescriptionChanging(value);
                    SendPropertyChanging();
                    _Description = value;
                    SendPropertyChanged("Description");
                    OnDescriptionChanged();
                }
            }
        }

        [Column(Storage = "_Author", DbType = "NVarChar(200)")]
        public string Author
        {
            get { return _Author; }
            set
            {
                if ((_Author != value))
                {
                    OnAuthorChanging(value);
                    SendPropertyChanging();
                    _Author = value;
                    SendPropertyChanged("Author");
                    OnAuthorChanged();
                }
            }
        }

        [Column(Storage = "_Title", DbType = "NText",
            UpdateCheck = UpdateCheck.Never)]
        public string Title
        {
            get { return _Title; }
            set
            {
                if ((_Title != value))
                {
                    OnTitleChanging(value);
                    SendPropertyChanging();
                    _Title = value;
                    SendPropertyChanged("Title");
                    OnTitleChanged();
                }
            }
        }

        [Column(Storage = "_Url", DbType = "NVarChar(255)")]
        public string Url
        {
            get { return _Url; }
            set
            {
                if ((_Url != value))
                {
                    OnUrlChanging(value);
                    SendPropertyChanging();
                    _Url = value;
                    SendPropertyChanged("Url");
                    OnUrlChanged();
                }
            }
        }

        [Column(Storage = "_FeedSourceName", DbType = "NVarChar(100) NOT NULL",
            CanBeNull = false)]
        public string FeedSourceName
        {
            get { return _FeedSourceName; }
            set
            {
                if ((_FeedSourceName != value))
                {
                    OnFeedSourceNameChanging(value);
                    SendPropertyChanging();
                    _FeedSourceName = value;
                    SendPropertyChanged("FeedSourceName");
                    OnFeedSourceNameChanged();
                }
            }
        }

        [Column(Storage = "_Read", DbType = "Bit NOT NULL")]
        public bool Read
        {
            get { return _Read; }
            set
            {
                if ((_Read != value))
                {
                    OnReadChanging(value);
                    SendPropertyChanging();
                    _Read = value;
                    SendPropertyChanged("Read");
                    OnReadChanged();
                }
            }
        }

        [Column(Storage = "_ShortenedUrl", DbType = "NVarChar(255) NOT NULL",
            CanBeNull = false)]
        public string ShortenedUrl
        {
            get { return _ShortenedUrl; }
            set
            {
                if ((_ShortenedUrl != value))
                {
                    OnShortenedUrlChanging(value);
                    SendPropertyChanging();
                    _ShortenedUrl = value;
                    SendPropertyChanged("ShortenedUrl");
                    OnShortenedUrlChanged();
                }
            }
        }

        [Column(Storage = "_Likes", DbType = "Int NOT NULL")]
        public int Likes
        {
            get { return _Likes; }
            set
            {
                if ((_Likes != value))
                {
                    OnLikesChanging(value);
                    SendPropertyChanging();
                    _Likes = value;
                    SendPropertyChanged("Likes");
                    OnLikesChanged();
                }
            }
        }

        [Association(Name = "SocialActivity_Enclosure_Id", Storage = "_Enclosures"
            , ThisKey = "Id", OtherKey = "SocialActivityId", DeleteRule = "CASCADE")]
        public EntitySet<Enclosure> Enclosures
        {
            get { return _Enclosures; }
            set { _Enclosures.Assign(value); }
        }

        #region INotifyPropertyChanged Members

        public event PropertyChangedEventHandler PropertyChanged;

        #endregion

        #region INotifyPropertyChanging Members

        public event PropertyChangingEventHandler PropertyChanging;

        #endregion

        protected virtual void SendPropertyChanging()
        {
            if ((PropertyChanging != null))
            {
                PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((PropertyChanged != null))
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Enclosures(Enclosure entity)
        {
            SendPropertyChanging();
            entity.SocialActivity = this;
        }

        private void detach_Enclosures(Enclosure entity)
        {
            SendPropertyChanging();
            entity.SocialActivity = null;
        }
    }
#pragma warning restore 1591
}