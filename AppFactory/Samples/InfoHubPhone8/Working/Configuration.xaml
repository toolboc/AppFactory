<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:v="clr-namespace:InfoHubPhone8"
                    xmlns:Config="clr-namespace:InfoHubPhone8.Config"
                    xmlns:Filters1="clr-namespace:InfoHubPhone8.Config.Content.Lists.Filters"
                    xmlns:Lists1="clr-namespace:InfoHubPhone8.Config.Content.Lists"
                    xmlns:Content="clr-namespace:InfoHubPhone8.Config.Content"
                    xmlns:Ads="clr-namespace:InfoHubPhone8.Config.Ads"
                    xmlns:Structure="clr-namespace:InfoHubPhone8.Config.Structure">
    <!-- Social Reader configuration information
         (look for comments inline for information on each section-->

    <!--    x:Key: 
                DO NOT CHANGE the Key as this is used to locate the configuration for the reader
            FeedbackEmailAddress: 
                This email address is used within the About page so that the user can provide feedback via email.
            Trial Period:
                The social reader supports four modes of operation: full functionality, full functionality (trial),
                limited functionality (trial), trial expired (trial). Modes with the "(trial)" suffix correspond to 
                modes where the application is in "trial" mode as per the Windows Phone marketplace. For example a 
                typical scenario would be:
                    - User installs the app via the "Try" option from the Windows Phone marketplace.
                    - The app supports a Full Functionality trial mode (ie FullFunctionalityInTrialMode="true")
                    - The app supports a total trial period of 12 days (ie TrialModeLengthInDays="12") but this is split
                           into 5 days of full functionality (ie FullFunctionalityTrialModeLengthInDays="5") and the 
                           remainder in limited functionality.
                    - The user can use the app for 5 days in "Full Functionality (trial)" mode
                    - The user can then use the app for another 7 days (ie 12-5=7 days) in "Limited Functionality (trial)" mode
                    - After the trial period (ie 12 days) expires, the user can then use the app in "Trial Expired (trial)" mode
                    - At any stage the user can purchase the app to have it run in "Full Functionality" mode
                    - NOTE: The app should behave the same in Full Functionality (trial) and Full Functionality modes
            TestMode:
                The TestMode attribute can be used to simulate the different modes of operation during development. Make 
                sure that this is set back to Disabled (or the attribute omitted completely) before shipping the 
                application. TestMode only works in DEBUG mode (just to be safe!)
                    - Disabled (or omitted)   Not in test mode
                    - Full                    Display as if in full functionality test mode or non-trial mode (ie app purchased)
                    - Limited                 Display as if in limited functionality mode
                    - TrialExpired            Display as if trial has expired
            LinkShortener:
                The application can shorten links for reposting. This attribute is the ProviderName of the social provider
                used to shorten links. By default this is BitLy-->
    <Config:ReaderConfiguration x:Key="Configuration"
                                FeedbackEmailAddress="support@wincoder.co"
                                FullFunctionalityInTrialMode="true"
                                FullFunctionalityTrialModeLengthInDays="5"
                                TrialModeLengthInDays="12"
                                TestMode="Disabled"
                                LinkShortener="BitLy">

        <!-- Specify one or more Ad providers that can be used within the application to serve up 
             Ads. The template ships with an implementation for the Microsoft Ad service (see
             the MicrosoftAdProvider class which implements, and extends, the IAdProvider interface).
             (NOTE: Also see the PageHelper class which is used to dynamically generate the AdControl 
             instance, since the Microsoft ad control doesn't correctly support databinding)-->
        <Config:ReaderConfiguration.AdProviders>
            <!-- Each AdProvider needs to have a unique AdProviderName which is how they are 
                 referenced in code (see PageDefinition later in this configuration). In the case of 
                 the MicrosoftAdProvider there is an additional attribute, AdApplicationId, which is 
                 used by the AdControl and assigned via PubCenter (http://pubcenter.microsoft.com)-->
            <Ads:MicrosoftAdProvider AdProviderName="Microsoft"
                                     AdApplicationId="5e77f8d8-f6c0-4303-9390-35bd9a421ba9">
                <!-- Within your application you can make use of one or more AdUnits. Again,
                     each one needs a unique AdUnitName so that it can be referenced in code (see 
                     PageDefinition later in this configuration). The MicrosoftAdUnit (implements
                     IAdUnit) also requires an AdUnitId attribute, created via PubCenter) -->
                <Ads:MicrosoftAdUnit AdUnitName="SocialViewerAd"
                                     AdUnitId="69391" />
            </Ads:MicrosoftAdProvider>
        </Config:ReaderConfiguration.AdProviders>

        <!-- You can specify any number of social providers. In order to use any/all of the social 
             providers you need to uncomment them and specify the required parameters. Each requires:
                ProviderName: The name by which it is referenced within the application
                TypeName: The assembly qualified name of the type that implements ISocial (can
                            inherit from BaseSocial to ease implementation)
                ApiKey, ApiSecret, AdditionalParameter: Up to three parameters which are used
                            by the social provider (see individual comments for details of existing
                            providers)
                Icon: 32x32 image that is used within the app alongside the social provider 
                            (eg in settings page where the user is to log into the social provider) -->
        <Config:ReaderConfiguration.SocialProviders>
            <!-- BitLy [Requires: ApiKey, ApiSecret]
                ApiSecret: Your Bitly username
                ApiKey: The API Key specified in your account (see https://bitly.com/a/account after
                            logging in)-->
            <Content:SocialProvider ProviderName="BitLy"
                                    TypeName="BuiltToRoam.Social.Implementations.BitLy, BuiltToRoam.Social"
                                    ApiKey=""
                                    ApiSecret="" />
            <!-- Facebook [Requires: ApiKey, ApiSecret] https://developers.facebook.com/apps
                 ApiSecret: App Secret for Facebook app
                 ApiKey: App ID/App Key for Facebook app-->
            <Content:SocialProvider ProviderName="Facebook"
                                    TypeName="BuiltToRoam.Social.Implementations.Facebook,BuiltToRoam.Social"
                                    ApiKey=""
                                    ApiSecret=""
                                    Icon="/Images/facebook_logo.png" />
            <!-- Flickr [Requires: ApiKey, ApiSecret, AdditionalParameter] http://www.flickr.com/services/apps
                 ApiSecret: Secret for Flickr app
                 ApiKey: Key for Flickr app
                 Additional Parameter: Authentication URL for Flick app (set App Type to Mobile application) -->
            <Content:SocialProvider ProviderName="Flickr"
                                    TypeName="BuiltToRoam.Social.Implementations.Flickr,BuiltToRoam.Social"
                                    ApiKey=""
                                    ApiSecret=""
                                    AdditionalParameter=""
                                    Icon="/Images/flickr_logo.png" />
            <!-- FourSquare [Requires: ApiKey] https://developer.foursquare.com/
                 ApiKey: Client ID for FourSquare app -->
            <Content:SocialProvider ProviderName="FourSquare"
                                    TypeName="BuiltToRoam.Social.Implementations.FourSquare,BuiltToRoam.Social"
                                    ApiKey=""
                                    Icon="/Images/foursquare_logo.png" />
            <!-- Google+ [Requires: ApiKey, ApiSecret] https://developers.google.com/+/api/ and https://code.google.com/apis/console
                 ApiSecret: Client Secret for Google Apis project
                 ApiKey: Client ID for Google Apis project -->
            <Content:SocialProvider ProviderName="Google+"
                                    TypeName="BuiltToRoam.Social.Implementations.GooglePlus,BuiltToRoam.Social"
                                    ApiKey=""
                                    ApiSecret=""
                                    Icon="/Images/googleplus_logo.png" />
            <!-- LinkedIn [Requires: ApiKey, ApiSecret] https://www.linkedin.com/secure/developer
                 ApiSecret: Secret Key for LinkedIn application
                 ApiKey: API Key for LinkedIn application-->
            <Content:SocialProvider ProviderName="LinkedIn"
                                    TypeName="BuiltToRoam.Social.Implementations.LinkedIn,BuiltToRoam.Social"
                                    ApiKey=""
                                    ApiSecret=""
                                    Icon="/Images/linkedin_logo.png" />
            <!-- Twitter [Requires: ApiKey, ApiSecret] https://dev.twitter.com/apps
                 ApiSecret: Consumer secret for Twitter app
                 ApiKey: Consumer key for Twitter app-->
            <Content:SocialProvider ProviderName="Twitter"
                                    TypeName="BuiltToRoam.Social.Implementations.Twitter,BuiltToRoam.Social"
                                    ApiKey=""
                                    ApiSecret=""
                                    Icon="/Images/twitter_logo.png" />
            <!-- Windows Live [Requires: ApiKey, ApiSecret] https://manage.dev.live.com/Applications/Index
                 ApiSecret: Client secret for Windows Live application 
                 ApiKey: Client ID for Windows Live application -->
            <Content:SocialProvider ProviderName="Windows Live"
                                    TypeName="BuiltToRoam.Social.Implementations.WindowsLive,BuiltToRoam.Social"
                                    ApiKey=""
                                    ApiSecret=""
                                    Icon="/Images/windowslive_logo.png" />
            <!-- YouTube [Requires: ApiKey, ApiSecret] https://accounts.google.com/ManageDomains
                 ApiSecret: OAuth Consumer secret for registered domain
                 ApiKey: OAuth Consumer Key for registered domain -->
            <Content:SocialProvider ProviderName="YouTube"
                                    TypeName="BuiltToRoam.Social.Implementations.YouTube,BuiltToRoam.Social"
                                    ApiKey=""
                                    ApiSecret=""
                                    Icon="/Images/youtube_logo.png" />
        </Config:ReaderConfiguration.SocialProviders>

        <!-- The social types define the different types of feeds that are to be parsed
             by the application. If you have your own data feed, implement both
             ISourceUrl (to determine the url of the feed to download) and ISourceParser 
             (to parse the downloaded content) and then add a SocialType:
             SocialTypeName: Is used to refer to the SocialType elsewhere in the application 
                            (see the Sources section of this configuration file)
             ParseTypeName: The type (implements ISourceParser) that will be loaded to parse the 
                            content downloaded
            SourceUrlTypeName: The type (implements ISourceUrl) that will be loaded to determine
                            the url of the content to be downloaded. If you simply want to use the Id
                            property of the SocialSource (see next configuration section), you can
                            reuse the DefaultSourceUrl class.
            Icon:           The icon associated with the feed that can be used through the application
            AssociatedSocialProvider: You can optionally associate a SocialProvider (see previous
                            configuration section) with a SocialType. For example in the case of
                            Facebook pages, you need to provide an ApiKey/ApiSecret in order to
                            access the page feed. This is defined in the SocialProvider for Facebook-->
        <Config:ReaderConfiguration.SocialTypes>
            <Content:SocialType SocialTypeName="Facebook"
                                ParserTypeName="InfoHubPhone8.Parsers.FacebookParser"
                                SourceUrlTypeName="InfoHubPhone8.SourceUrls.FacebookSourceUrl"
                                Icon="/Images/facebook_logo.png"
                                AssociatedSocialProvider="Facebook" />
            <Content:SocialType SocialTypeName="Twitter"
                                ParserTypeName="InfoHubPhone8.Parsers.TwitterParser"
                                SourceUrlTypeName="InfoHubPhone8.SourceUrls.TwitterSourceUrl"
                                Icon="/Images/twitter_logo.png" />
            <Content:SocialType SocialTypeName="RSS"
                                ParserTypeName="InfoHubPhone8.Parsers.RssParser"
                                SourceUrlTypeName="InfoHubPhone8.SourceUrls.DefaultSourceUrl"
                                Icon="/Images/rss_logo.png" />
            <Content:SocialType SocialTypeName="Atom"
                                ParserTypeName="InfoHubPhone8.Parsers.AtomParser"
                                SourceUrlTypeName="InfoHubPhone8.SourceUrls.DefaultSourceUrl"
                                Icon="/Images/rss_logo.png" />
            <Content:SocialType SocialTypeName="Flickr"
                                ParserTypeName="InfoHubPhone8.Parsers.FlickrParser"
                                SourceUrlTypeName="InfoHubPhone8.SourceUrls.FlickrSourceUrl"
                                Icon="/Images/flickr_logo.png" />
        </Config:ReaderConfiguration.SocialTypes>

        <!-- Sources defines ALL of the data feeds for the application. Activities returned
             by the various sources are then broken into different lists (see next section)
             Each source has the following:
                SourceName: A friendly (yes, it is displayed on the About page of the application) name
                            for the SocialSource. This is also the name that is referenced elsewhere 
                            in the configuration file
                SourceTypeName: Associates the SocialSource with a SocialType (see previous section)
                            so that the application knows how to determine the download Url and
                            so that it can parse the returned data.
                Id:         An attribute used by the ISourceUrl implementation to determine the
                            Url of the data to be downloaded. This varies based on the SocialType.
                            For example
                                Flickr search:       Id="wp7,nokia"  Comma delimited tags
                                Twitter search:      Id=“blah”       Where “blah” is the search term
                                Twitter User search: Id=“@user”      Finds all posts by or referencing this user
                                Twitter From User:   Id=“from:user”  Finds all posts by the user
                                Twitter Hashtag:     Id=“#search”    Searches for a hashtag
                                Facebook:            Id="8195378771" Id for publically accessible Facebook page 
                                RSS/Atom:            Id="http://windowsteamblog.com/windows_phone/b/windowsphone/rss.aspx"  Full url to the RSS/Atom feed
                OnDemand:   Set this attribute to True for any data feed you don't want to be downloaded
                            automatically when the application starts.
                -->
        <Config:ReaderConfiguration.Sources>
            <!-- Windows Phone (Facebook, Twitter and RSS) -->

            <Content:SocialSource SourceName="News"
                                  SourceTypeName="RSS"
                                  Id="http://www.pushsquare.com/feeds/latest"/>

            <Content:SocialSource SourceName="Photos"
                                  SourceTypeName="Flickr"
                                  Id="playstation" />

            <Content:SocialSource SourceName="Videos"
                                  SourceTypeName="RSS"
                                  Id="http://gdata.youtube.com/feeds/base/videos?max-results=12&amp;alt=rss&amp;author=PlayStation"/>

            <Content:SocialSource SourceName="Twitter"
                                  SourceTypeName="Twitter"
                                  Id="from:PlayStation" />

        </Config:ReaderConfiguration.Sources>

        <!-- You can think of lists as a way for the social activities to be grouped.
             For example you might have three SocialSources that you want to combine 
             into a single list (eg the "what's new" list below takes social activities
             from SocialSources with the names "WP7 Facebook", "Twitter Windows Phone"
             and "Twitter WP7". You can define your own lists based on existing filters,
             or create your own filter by implementing IListFilter-->
        <Config:ReaderConfiguration.Lists>
            <Lists1:DefaultListCreator>
                <!-- Filter based on the name of the SocialSource - the names are
                         an OR so specifying multiple names will include activities 
                         from any of the SocialSources -->        

				
				<Lists1:ReaderList ListName="News"
                                   Title="News"
                                   ShortTitle="News">
                    <Filters1:SourceName Name="News" />
                </Lists1:ReaderList>
                
                <Lists1:ReaderList ListName="Photos"
                                   Title="Photos"
                                   ShortTitle="Photos">
                    <Filters1:SourceName Name="Photos" />
                </Lists1:ReaderList>
                
                <Lists1:ReaderList ListName="Videos"
                                   Title="Videos"
                                   ShortTitle="Videos">
                    <Filters1:SourceName Name="Videos" />
                </Lists1:ReaderList>

                <Lists1:ReaderList ListName="Twitter"
                                   Title="Twitter"
                                   ShortTitle="Twitter">
                    <Filters1:SourceName Name="Twitter" />
                </Lists1:ReaderList>



            </Lists1:DefaultListCreator>
        </Config:ReaderConfiguration.Lists>

        <!-- The last section of the configuration file is to determine how the application
             is structured. Each page needs to be defined here and allows for some minimal
             page configuration. The PageName attribute of the PageDefinition needs to 
             correlate to the view model for the page. Eg MainPageViewModel is the PageName 
             of the PageDefinition for the MainPage.xaml page
             There are specific configurations for the Panorama, Pivot 
             and Reader page types. The rest have a Custom page type, meaning that all the 
             layout is controlled via the XAML on the page. You can also define what Ads are
             displayed by specifying the AdProviderName and AdUnitName for pages you want
             Ads to appear on (currently they only appear in trial mode) -->
            <Config:ReaderConfiguration.Structure>
            <Structure:PageLayout>

                <!-- The MainPage of the application has a Panorama type. In the XAML you'll
                     see a Panorama control with the DataContext bound to the PanoramaImplementation
                     property on the view model, which exposes properties that can be data bound
                     to for the title, headers and content of the panorama items. 
                     The ItemTemplate of the Panorama control is data bound to an instance of the
                     MultiplePaneTemplateSelector class, which exposes attributes that define the
                     templates for both list and link panes (ie the ListTemplate and LinkTemplate
                     attributes). The LinkTemplate simply defines a layout in XAML. However, the 
                     ListTemplate is a ListTemplateSelector which selects the type of list to display
                     based on the TemplateName (see the TemplateName attribute of the ListDefinition
                     instances below).
                     The structure of the panorama is defined by the MultiplePanePageDefinition section below -->
                <Structure:MultiplePanePageDefinition PageName="MainPageViewModel"
                                                      PageType="Panorama"
                                                      Title="PlayStated">
                    <!-- The first pane of the panorama is a list of items with a header of
                             "what's new". The list pane contains a list with the name "what's new",
                             which correlates to a list defined earlier in this configuration file,
                             and the layout of the list is defined by the StandardListTemplate. The
                             AppBarStateName corresponds to the state enumeration in the MainPageViewModel
                             and is used to show, hide and configure the app bar icons/menu items-->
                    <Structure:ListPaneDefinition Header="News"
                                                  ListName="News"
                                                  TemplateName="StandardListTemplate"
                                                  AppBarStateName="AppBarMinimized"/>
        
                    <!-- The second pane of the panorama is a horizontal list 
                             (ie Orientation="Horizontal" and MaxWidth=768") where the list layout
                             is defined by the HorizontlaTileListTemplate -->
                    <Structure:ListPaneDefinition Header="Photos"
                                                  Orientation="Horizontal"
                                                  MaxWidth="788"
                                                  ListName="Photos"
                                                  TemplateName="HorizontalTileListTemplate"
                                                  AppBarStateName="AppBarDefault" />

                    <Structure:ListPaneDefinition Header="Videos"
                                                  ListName="Videos"
                                                  TemplateName="StandardListTemplate"
                                                  AppBarStateName="AppBarMinimized"/>

                    <Structure:ListPaneDefinition Header="Twitter"
                                                  ListName="Twitter"
                                                  TemplateName="StandardListTemplate"
                                                  AppBarStateName="AppBarMinimized"/>

                    <!-- The third pane of the panorama is a list of links. Each
                             link has a LinkType (Page, Site or Custom) and can optionally
                             specify a Destination (page name (Page) or Url (Site)) and a 
                             Parameter-->
                    <Structure:LinkPaneDefinition Header="PlayStated"
                                                  AppBarStateName="AppBarNone">
                        
						<Structure:LinkDefinition Title="News"
                                                  LinkType="Page"
                                                  Destination="InfoHubPhone8.Pages.Pivot.PivotPage"
                                                  Parameter="News" />																	  												  

                        <Structure:LinkDefinition Title="More News"
                                                  LinkType="Site"
                                                  Destination="http://www.pushsquare.com/"/>

                        <Structure:LinkDefinition Title="Photos"
                                                  LinkType="Page"
                                                  Destination="InfoHubPhone8.Pages.Pivot.PivotPage"
                                                  Parameter="Photos" />

                        <Structure:LinkDefinition Title="Videos"
                                                  LinkType="Page"
                                                  Destination="InfoHubPhone8.Pages.Pivot.PivotPage"
                                                  Parameter="Videos" />

                        <Structure:LinkDefinition Title="Twitter"
                                                  LinkType="Page"
                                                  Destination="InfoHubPhone8.Pages.Pivot.PivotPage"
                                                  Parameter="Twitter" />

                        <Structure:LinkDefinition Title="purchase"
                                                  LinkType="Custom" />
											 															  
                        <Structure:LinkDefinition Title="about"
                                                  LinkType="Page"
                                                  Destination="InfoHubPhone8.Pages.About.AboutPage" />
                    </Structure:LinkPaneDefinition>
                </Structure:MultiplePanePageDefinition>

                <!-- The Pivot page contains a number of panes, again using the MultiplePanePageDefinition
                     to define each of the panes. In this case the lists all use the PivotListTemplate. 
                     Note that this page includes the AdProviderName and AdUnitName attributes so that an
                     Ad can be displayed. Look for the AdPlaceholder element on the PivotPage -->
                <Structure:MultiplePanePageDefinition PageName="PivotPageViewModel"
                                                      PageType="Pivot"
                                                      AdProviderName="Microsoft"
                                                      AdUnitName="SocialViewerAd"
                                                      Title="News">
 
				   <Structure:ListPaneDefinition Header="News"
                                                  ListName="News"
                                                  TemplateName="PivotListTemplate" />

                    <Structure:ListPaneDefinition Header="Photos"
                                                  ListName="Photos"
                                                  TemplateName="PivotListTemplate" />

                    <Structure:ListPaneDefinition Header="Videos"
                                                  ListName="Videos"
                                                  TemplateName="PivotListTemplate" />

                    <Structure:ListPaneDefinition Header="Twitter"
                                                  ListName="Twitter"
                                                  TemplateName="PivotListTemplate" />


                </Structure:MultiplePanePageDefinition>
                <Structure:ReaderPageDefinition PageName="ReaderPageViewModel"
                                                 PageType="Reader"
                                                 AdProviderName="Microsoft"
                                                 AdUnitName="SocialViewerAd">
                    <Structure:ReaderTemplate TemplateName="DefaultActivityTemplate" />
                    <Structure:ReaderTemplate TemplateName="WebContentActivityTemplate" SocialTypeName="RSS" />
                </Structure:ReaderPageDefinition>
                <Structure:SinglePanePageDefinition PageName="ListPageViewModel"
                                                    PageType="List"
                                                    AdProviderName="Microsoft"
                                                    AdUnitName="SocialViewerAd"
                                                    Title="News">
                    <Structure:ListPaneDefinition TemplateName="ListTemplate" />
                </Structure:SinglePanePageDefinition>

                    <Structure:PageDefinition PageName="SettingsPageViewModel"
                                          PageType="Custom"
                                          AdProviderName="Microsoft"
                                          AdUnitName="SocialViewerAd" />
                <Structure:PageDefinition PageName="AboutPageViewModel"
                                          PageType="Custom"
                                          AdProviderName="Microsoft"
                                          AdUnitName="SocialViewerAd" />
                <Structure:PageDefinition PageName="AuthPageViewModel"
                                          PageType="Custom" />
                <Structure:PageDefinition PageName="PostPageViewModel"
                                          PageType="Custom" />
            </Structure:PageLayout>
        </Config:ReaderConfiguration.Structure>
    </Config:ReaderConfiguration>
</ResourceDictionary>