

----------------------------------------------------------------
		Database Schema Instructions
----------------------------------------------------------------
This template works by progressively downloading each of the social sources (see Configuration.xaml) and parsing them into a list of activities (see SocialActivity class). These activities are inserted into a SQL CE database (see ActivitiesFileName constant in RunTimeRepository class for the name of the db file), along with their associated enclosures (links to images, videos etc). The structure of this database is defined by the DataStructure.generated.cs file which has been automatically generated using the SQLMetal commandline tool. 

DO NOT MODIFY THE DATABASE.CS FILE BY HAND!

There are two options to making changes to the SocialActivity, Enclosure or Activities classes:
1) Regenerate database.cs
[This is if you need to add additional fields/properties that you want to be persisted in the database]

- You'll see that there is a file Activities.sdf included in the project. This is NOT deployed with the application and is there as a template for the database file that will get created at runtime by the template. Open this file in either Visual Studio (Server Explorer) or SQL Management Studio.
- Add/Edit columns in Activities.sdf
- Run SQLMetal from Visual Studio Command Prompt
	eg sqlmetal Activities.sdf /code:DataStructure.generated.cs /pluralize


2) Add additional properties
[This is if you want to add additional properties and methods to any of the generated classes but don't want them to be persisted to the database (see DataStructure.extension.cs)]

- Open DataStructure.extension.cs and add additional properties/methods to the appropriate class. The classes are all partial classes so you can add additional properties/methods etc into this file without worry about them being overwritten if you decide to generate the DataStructure.generated.cs file at a later date.